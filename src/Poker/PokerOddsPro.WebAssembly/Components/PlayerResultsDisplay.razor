@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using static PokerOddsPro.Shared.Helpers.Helper;
@using PokerOddsPro.OddsEngine.Dto;
@using PokerOddsPro.Shared.Helpers;


@if (streetsHaveResults)
{
    <div class="accordion-content" style="max-height:@Height;">
        <div class="table-container" aria-label="Destinations">
            <div class="flex-table header">
                <div class="flex-row first">Hand</div>
                @foreach (var street in streets)
                {
                    <div class="flex-row" style="width: @WidthOfPercentageColumn;">@street.streetDescriptor.StreetName</div>
                }
            </div>
            @foreach (HandTypeEnum handType in (HandTypeEnum[])Enum.GetValues(typeof(HandTypeEnum)))
            {
                <div class="flex-table row" role="rowgroup">
                    <div class="flex-row first"> @GetEnumDescription(handType)</div>
                    @foreach (var street in streets)
                    {
                        <div class="flex-row" style="width: @WidthOfPercentageColumn;"> @GetStreetDisplay(street, handType)</div>
                    }
                </div>
            }
        </div>
    </div>
}



<style>

    .accordion-content {
        -webkit-transition: max-height 1s;
        -moz-transition: max-height 1s;
        -ms-transition: max-height 1s;
        -o-transition: max-height 1s;
        transition: max-height 1s;
        overflow: hidden;
    }

    .row {
        margin: 0px;
    }


    .table-container {
        display: block;
        border-radius: 10px;
        overflow: auto;
        margin: 2em 1em 2em 1em;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .flex-table {
        display: flex;
        flex-flow: row wrap;
        border-left: solid 1px #d9d9d9;
        transition: 0.5s;
        background: white;
        background: rgba(247,247,247,0.8);
    }

        .flex-table:first-of-type .flex-row {
            background: black;
            color: white;
            border-color: black;
        }

        .flex-table.row:nth-child(odd) .flex-row {
            background: #f4f2f1;
        }

    .flex-row {
        text-align: center;
        padding: 0.5em 0.5em;
        border-right: solid 1px #d9d9d9;
        border-bottom: solid 1px #d9d9d9;
    }

        .flex-row.first {
            width: 34%;
        }

    .rowspan {
        display: flex;
        flex-flow: row wrap;
        align-items: flex-start;
        justify-content: center;
    }

    .column {
        display: flex;
        flex-flow: column wrap;
        width: 75%;
        padding: 0;
    }

        .column .flex-row {
            display: flex;
            flex-flow: row wrap;
            padding: 0;
            border: 0;
            border-bottom: solid 1px #d9d9d9;
        }

            .column .flex-row:hover {
                background: #f5f5f5;
                transition: 500ms;
            }


    @@media all and (max-width: 767px) {
        .table-container {
            font-size: 0.8rem;
        }

        .flex-row {
            padding: 0.4em 0.4em;
        }
    }

    @@media all and (max-width: 380px) {
        .table-container {
            font-size: 0.6rem;
        }

        .flex-row {
            padding: 0.3em 0.3em;
        }
    }
</style>

@code {

    [Parameter]
    public List<PlayerTrackingStreet> streets
    {
        get { return _streets; }
        set
        {
            _streets = value;
            if (_streets == null) ToggleOff();
        }
    }
    private List<PlayerTrackingStreet> _streets { get; set; }

    private bool streetsHaveResults => (streets != null && streets.Any());

    public bool IsToggleOn = false;
    public void ToggleOff() => IsToggleOn = false;
    public void FlipToggle() => IsToggleOn = !IsToggleOn;

    private string WidthOfPercentageColumn => Helper.IntToDisplayString(66 / streets.Count, PokerOddsPro.Shared.Dto.DisplayMeasurementTypeEnum.percentage);
    private string Height => (IsToggleOn) ? "500px" : "0px";

    private string GetStreetDisplay(PlayerTrackingStreet street, HandTypeEnum handType)
    {
        if (street == null) return "";

        var total = street.TotalMesurements;
        var value = street.resultsByHand[handType];

        if (value == 0)
        {
            return "";
        }

        var winPercentage = (double)value / total;

        return winPercentage.ToString("P");
    }
}
