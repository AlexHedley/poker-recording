@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using PokerOddsPro.Shared.Dto;
@using PokerOddsPro.Shared.Helpers;
@using PokerOddsPro.Shared.ViewModels;

<div style="@((CustomWrapperCss != null) ? CustomWrapperCss : @standardWrapperCss)">
    <div style="position: relative;padding-top:153%; max-width:135px; min-width:10px; width:auto">
        <div style="position: absolute; left: 0; top: 0; width:100%; height:100%;">
            @if (card.IsSelected || ShowCard)
            {
                <div class="card @DisplayMode" style="transform:rotateY(@degreesDisplay);">
                    @if (CardDisplayType == CardDisplayTypeEnum.Modern)
                    {
                        <div class="front modern" style="background-image:@cardImageModernPath;" @onclick="() => card.SelectCardSlot()">
                            <div class="num" style="color:@cardTextColor;">@cardNumberDisplay</div>
                        </div>
                    }
                    else
                    {
                        <div class="front" style="background-image:@cardImageClassicPath;" @onclick="() => card.SelectCardSlot()" />
                    }
                    <div class="back @shouldFadeInAnimation"></div>
                </div>
                cardRendered = true;
            }
            else
            {
                <div class="card @DisplayMode invis" style="background-image:@invisCardIcon;" @onclick="() => card.SelectCardSlot()"></div>
                cardRendered = false; ;
            }
        </div>
    </div>
</div>

@code {
    private CardSlot _card { get; set; }
    [Parameter]
    public CardSlot card { get; set; }

    [Parameter]
    public DisplayModeEnum DisplayMode { get; set; }

    [Parameter]
    public CardDisplayTypeEnum CardDisplayType { get; set; }

    [Parameter]
    public string CustomWrapperCss { get; set; }

    private const string standardWrapperCss = "margin:10px; float:left; min-width:50px;";
    private const string faseInTime = "0.7s";

    private bool ShowCard => (card.Card != null);

    private string invisCardIcon => (DisplayMode == DisplayModeEnum.LightMode) ? $"url('{ConstPaths.whiteEmptyCardCirclePath}')" : $"url('{ConstPaths.blackEmptyCardCirclePath}')";

    private string cardNumberDisplay => (ShowCard) ? card.Card.CardInfo.GetNumberDisplay() : "";
    private string cardSuitDisplay => (ShowCard) ? card.Card.CardInfo.CardSuit.ToString().ToLower() : "";
    private string degreesDisplay => (ShowCard) ? "0deg" : "180deg";

    private string cardImageModernPath => $"url('{Helper.GetLinkToSuit(card.Card?.CardInfo.CardSuit)}')";
    private string cardImageClassicPath => $"url('{Helper.GetLinkToCard(card.Card?.CardInfo)}')";
    private string cardTextColor => Helper.GetColor(card.Card?.CardInfo.CardSuit);

    private bool cardRendered;
    private string shouldFadeInAnimation => ((!cardRendered) ? ConstPaths.fadeInAnimationClass : "");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_card != card)
        {
            card.IsSelectedCardSet += (s, e) => StateHasChanged();
            card.IsSelectedCardRemoved += (s, e) => StateHasChanged();
            card.CardSlotCardUpdated += (s, e) => StateHasChanged();

            if (!firstRender)
            {
                _card.IsSelectedCardSet -= (s, e) => StateHasChanged();
                _card.IsSelectedCardRemoved -= (s, e) => StateHasChanged();
                _card.CardSlotCardUpdated -= (s, e) => StateHasChanged();
            }

            _card = card;
        }
    }
}
